[PLEASE NOTE: THIS DOCUMENT IS MOSTLY AI GENERATED!]

(ROLE SYSTEM!)

Tables:
    - Student (Class ID)
    - Class (Head Teacher ID, Classroom ID)
    - GradeStudent (Student ID, Teacher ID, Subject ID)
    
    - Timetable (Subject ID, Teacher ID, Classroom ID, WHEN?)
    - Enrollment (Student ID, Lesson ID)

    - Teacher
    - Classroom
    - Subject

    - Grade (GradeType ID)

    - GradeType (Number and sentence)

    - GradeStudent (Student ID, Teacher ID, Subject, Grade)

    - Exams

Core Entities:
    Students:
        - Personal information (name, date of birth, address, etc.)
        - Contact infos (email, phone, address, bank account)
        - Enrollment details (grade level, class, etc.)
        - Academic records (grades, attendance, etc.)
    Teachers:
        - Personal information
        - Teaching assignments (subjects, classes)
        - Qualifications and certifications
    Courses:
        - Course name, description, prerequisites
        - Curriculum and syllabus
        - Schedule and location
    Classes:
        - Class name, grade level, section
        - Students enrolled
        - Teacher assigned
    Subjects:
        - Subject name, description, grade level
        - Curriculum and syllabus
        - Teachers who teach the subject
    Grades:

Additional Entities
    Staff:
        - Administrative staff (e.g., principals, office staff)
        - Support staff (e.g., janitors, cafeteria workers)
    Parents:
        - Contact information
        - Emergency contacts
    Announcements:
        - Title, content, target audience
    Events:
        - Event name, date, time, location
        - Description, attendees
    Library:
        - Books, journals, other resources
        - Check-in/check-out system
    Finance:
        - Tuition fees, payments, invoices
        - Financial reports

Relationships:
    - Students can be enrolled in multiple Courses.
    - Teachers can teach multiple Courses and Classes.
    - Courses can have multiple Classes.
    - Classes have many Students and one Teacher.
    - Schools have many Students, Teachers, Courses, and Classes.
    - Parents can have multiple Children who are Students.

SQL:
    - Core Entities:
        students:
            student_id (INT, PRIMARY KEY, AUTO_INCREMENT)
            first_name (VARCHAR(50))
            last_name (VARCHAR(50))
            date_of_birth (DATE)
            gender (ENUM('Male', 'Female', 'Other'))
            address VARCHAR(255),
            city VARCHAR(100),
            state VARCHAR(50),
            zip_code VARCHAR(20),
            country VARCHAR(100)
            phone_number (VARCHAR(20))
            email (VARCHAR(100))
            enrollment_date (DATE)
            grade_level (INT)
        teachers:
            teacher_id (INT, PRIMARY KEY, AUTO_INCREMENT)
            first_name (VARCHAR(50))
            last_name (VARCHAR(50))
            date_of_birth (DATE)
            gender (ENUM('Male', 'Female', 'Other'))
            address VARCHAR(255),
            city VARCHAR(100),
            state VARCHAR(50),
            zip_code VARCHAR(20),
            country VARCHAR(100)
            phone_number (VARCHAR(20))
            email (VARCHAR(100))
            hire_date (DATE)
            subject_specialization (VARCHAR(100))
        courses:
            course_id (INT, PRIMARY KEY, AUTO_INCREMENT)
            course_name (VARCHAR(100))
            course_description (TEXT)
            credits (INT)
            grade_level (INT)
        classes:
            class_id (INT, PRIMARY KEY, AUTO_INCREMENT)
            class_name (VARCHAR(50))
            grade_level (INT)
            section (VARCHAR(10))
            teacher_id (INT, FOREIGN KEY REFERENCES teachers(teacher_id))
        student_courses:
            student_course_id (INT, PRIMARY KEY, AUTO_INCREMENT)
            student_id (INT, FOREIGN KEY REFERENCES students(student_id))
            course_id (INT, FOREIGN KEY REFERENCES courses(course_id))
            grade (DECIMAL(5,2))
    - Additional Entities:
        staff:
            staff_id (INT, PRIMARY KEY, AUTO_INCREMENT)
            first_name (VARCHAR(50))
            last_name (VARCHAR(50))
            date_of_birth (DATE)
            gender (ENUM('Male', 'Female', 'Other'))
            address (VARCHAR(255))
            phone_number (VARCHAR(20))
            email (VARCHAR(100))
            hire_date (DATE)
            department (VARCHAR(100))
        parents:
            parent_id (INT, PRIMARY KEY, AUTO_INCREMENT)
            first_name (VARCHAR(50))
            last_name (VARCHAR(50))
            address (VARCHAR(255))
            phone_number (VARCHAR(20))
            email (VARCHAR(100))
        student_parent:
            student_parent_id (INT, PRIMARY KEY, AUTO_INCREMENT)
            student_id (INT, FOREIGN KEY REFERENCES students(student_id))
            parent_id (INT, FOREIGN KEY REFERENCES parents(parent_id))
        announcements:
            announcement_id (INT, PRIMARY KEY, AUTO_INCREMENT)
            title (VARCHAR(100))
            content (TEXT)
            date_created (DATETIME)
        events:
            event_id (INT, PRIMARY KEY, AUTO_INCREMENT)
            event_name (VARCHAR(100))
            event_date (DATE)
            event_time (TIME)
            location (VARCHAR(255))
            description (TEXT)
        library_items:
            item_id (INT, PRIMARY KEY, AUTO_INCREMENT)
            title (VARCHAR(100))
            author (VARCHAR(100))
            publication_year (INT)
            type (ENUM('Book', 'Journal', 'DVD', 'Other'))
        library_loans:
            loan_id (INT, PRIMARY KEY, AUTO_INCREMENT)
            student_id (INT, FOREIGN KEY REFERENCES students(student_id))
            item_id (INT, FOREIGN KEY REFERENCES library_items(item_id))
            checkout_date (DATE)
            due_date (DATE)
            return_date (DATE)
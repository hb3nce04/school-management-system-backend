generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// TODO: 2024.10.28
model User {
    id          Int       @id @default(autoincrement())
    username    String
    password    String
    role        Role
    createdAt   DateTime  @default(now())
    updatedAt   DateTime?
    lastLoginAt DateTime?
    students    Student[]
}

model Ring {
    id        Int        @id @default(autoincrement())
    name      String
    isActive  Boolean    @default(false)
    ringTimes RingTime[]
}

model RingTime {
    id        Int      @id @default(autoincrement())
    ringId    Int
    no        Int
    startTime DateTime
    endTime   DateTime
    ring      Ring     @relation(fields: [ringId], references: [id])
}

model Announcement {
    id          Int      @id @default(autoincrement())
    classId     Int
    title       String
    description String
    createdAt   DateTime
    expireAt    DateTime
    class       Class    @relation(fields: [classId], references: [id])
}

model CommunityService {
    id           Int      @id @default(autoincrement())
    studentId    Int
    startDate    DateTime
    endDate      DateTime
    facilityName String
    hours        Int
    task         String
    description  String
    recordDate   DateTime
    student      Student  @relation(fields: [studentId], references: [id])
}

model StudentIdentity {
    id                     Int     @id @default(autoincrement())
    studentId              Int     @unique
    studentNumber          String
    bankAccountType        String
    bankAccountNumber      String
    insurranceNumber       String
    studentCardId          String
    personalIdentityNumber String
    student                Student @relation(fields: [studentId], references: [id])
}

model Student {
    id                Int                @id @default(autoincrement())
    sheetNumber       Int
    firstName         String
    lastName          String
    bFirstName        String
    bLastName         String
    mFirstName        String
    mLastName         String
    gender            Gender
    eduId             String
    description       String
    birthCountry      String
    birthDate         String
    birthCity         String
    isActive          Boolean            @default(true)
    isArchived        Boolean            @default(false)
    classId           Int?
    userId            Int?
    class             Class?             @relation(fields: [classId], references: [id])
    user              User?              @relation(fields: [userId], references: [id])
    communityServices CommunityService[]
    studentIdentity   StudentIdentity?
    evaluations       Evaluation[]
    caretakers        Caretaker[]
    attendances       Attendance[]
}

model Class {
    id              Int            @id @default(autoincrement())
    academyYear     String
    name            String
    type            String
    headTeacherId   Int
    baseClassroomId Int            @unique
    description     String
    isFinalYear     Boolean        @default(false)
    maxCapacity     Int            @default(30)
    baseClassroom   Classroom      @relation(fields: [baseClassroomId], references: [id])
    students        Student[]
    subjects        Subject[]
    announcements   Announcement[]
}

model Classroom {
    id       Int     @id @default(autoincrement())
    name     String
    type     String
    area     Int
    capacity Int
    isActive Boolean @default(false)

    class   Class?
    lessons Lesson[]
}

model Lesson {
    id          Int          @id @default(autoincrement())
    subjectId   Int
    classroomId Int
    name        String
    description String
    dayNo       Int
    timetableNo Int
    subject     Subject      @relation(fields: [subjectId], references: [id])
    classroom   Classroom    @relation(fields: [classroomId], references: [id])
    attendances Attendance[]
}

model Subject {
    id           Int          @id @default(autoincrement())
    name         String
    shortName    String
    certName     String
    isMajor      Boolean      @default(true)
    isPractice   Boolean      @default(false)
    isCounts     Boolean      @default(false)
    serialNumber String
    classId      Int
    teacherId    Int
    class        Class        @relation(fields: [classId], references: [id])
    teacher      Teacher      @relation(fields: [teacherId], references: [id])
    lessons      Lesson[]
    evaluations  Evaluation[]
}

model Teacher {
    id                  Int          @id @default(autoincrement())
    firstName           String
    lastName            String
    gender              Gender
    subjects            Subject[]
    recordedEvaluations Evaluation[]
}

model EvaluationType {
    id          Int          @id @default(autoincrement())
    no          String
    name        String
    isProtected Boolean      @default(false)
    isVisible   Boolean      @default(true)
    evaluations Evaluation[]
}

model Evaluation {
    id               Int            @id @default(autoincrement())
    studentId        Int
    subjectId        Int
    recordTeacherId  Int
    isActive         Boolean        @default(true)
    description      String
    evaluationTypeId Int
    scoreValue       String
    feedback         String
    student          Student        @relation(fields: [studentId], references: [id])
    subject          Subject        @relation(fields: [subjectId], references: [id])
    teacher          Teacher        @relation(fields: [recordTeacherId], references: [id])
    evaluationType   EvaluationType @relation(fields: [evaluationTypeId], references: [id])
}

model Caretaker {
    id        Int     @id @default(autoincrement())
    firstName String
    lastName  String
    email     String
    phone     String
    studentId Int
    student   Student @relation(fields: [studentId], references: [id])
}

model Attendance {
    id        Int     @id @default(autoincrement())
    lessonId  Int
    studentId Int
    attended  Boolean
    lesson    Lesson  @relation(fields: [lessonId], references: [id])
    student   Student @relation(fields: [studentId], references: [id])
}

enum Gender {
    MALE
    FEMALE
    OTHER
    PREFER_NOT_TO_SAY
}

enum Role {
    STUDENT
    TEACHER
    CARETAKER
    ADMIN
}

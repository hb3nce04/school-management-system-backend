generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// TODO: last update: 2024.11.01 -> sync with draw.io !!!
// createdAt ? recordedAt
model Student {
    id                Int                @id @default(autoincrement())
    firstName         String
    lastName          String
    birthFirstName    String
    birthLastName     String
    motherFirstName   String
    motherLastName    String
    birthCountry      String
    birthDate         DateTime           @db.Date()
    birthCity         String
    gender            Gender
    description       String
    createdAt         DateTime           @default(now())
    updatedAt         DateTime?
    userId            Int?
    classId           Int?
    user              User?              @relation(fields: [userId], references: [id])
    class             Class?             @relation(fields: [classId], references: [id])
    studentIdentity   StudentIdentity?
    communityServices CommunityService[]
    evaluations       Evaluation[]
    caretakers        Caretaker[]
    attendances       Attendance[]
}

model StudentIdentity {
    id                     Int             @id @default(autoincrement())
    studentNumber          String          @unique @db.VarChar(11)
    studentCardId          String          @unique @db.VarChar(10)
    bankAccountNumber      String          @unique @db.VarChar(24)
    insurranceNumber       String          @unique @db.VarChar(9)
    personalIdentityNumber String          @unique @db.VarChar(8)
    studentId              Int             @unique
    bankAccountTypeId      Int
    student                Student         @relation(fields: [studentId], references: [id])
    bankAccountType        BankAccountType @relation(fields: [bankAccountTypeId], references: [id])
}

// TODO: maybe adding location infos
model School {
    id   Int    @id @default(autoincrement())
    name String @unique
}

model User {
    id          Int       @id @default(autoincrement())
    username    String    @unique
    password    String
    createdAt   DateTime  @default(now())
    lastLoginAt DateTime?
    updatedAt   DateTime?
    role        Role
    students    Student[]
}

model Ring {
    id        Int        @id @default(autoincrement())
    name      String     @unique
    isActive  Boolean    @default(false)
    ringTimes RingTime[]
}

model RingTime {
    id        Int      @id @default(autoincrement())
    startTime DateTime @db.Time()
    endTime   DateTime @db.Time()
    ringId    Int
    ring      Ring     @relation(fields: [ringId], references: [id])
}

model Announcement {
    id          Int       @id @default(autoincrement())
    title       String
    description String
    createdAt   DateTime  @default(now())
    expireAt    DateTime?
    classId     Int
    class       Class     @relation(fields: [classId], references: [id])
}

model CommunityService {
    id                         Int                       @id @default(autoincrement())
    startDate                  DateTime                  @db.Date()
    endDate                    DateTime                  @db.Date()
    hours                      Int
    task                       String
    description                String
    createdAt                  DateTime                  @default(now())
    studentId                  Int
    communityServiceFacilityId Int
    student                    Student                   @relation(fields: [studentId], references: [id])
    CommunityServiceFacility   CommunityServiceFacility? @relation(fields: [communityServiceFacilityId], references: [id])
}

model Class {
    id              Int            @id @default(autoincrement())
    // academyYear     String ?
    name            String         @unique
    type            String
    description     String
    maxCapacity     Int            @default(30)
    isFinalYear     Boolean        @default(false) // ?
    headTeacherId   Int            @unique
    baseClassroomId Int            @unique
    headTeacher     Teacher        @relation(fields: [headTeacherId], references: [id])
    baseClassroom   Classroom      @relation(fields: [baseClassroomId], references: [id])
    students        Student[]
    subjects        Subject[]
    announcements   Announcement[]
}

model Classroom {
    id              Int           @id @default(autoincrement())
    name            String        @unique
    area            Int
    capacity        Int
    isActive        Boolean       @default(false)
    classroomTypeId Int
    class           Class?
    lessons         Lesson[]
    classroomType   ClassroomType @relation(fields: [classroomTypeId], references: [id])
}

model Lesson {
    id          Int          @id @default(autoincrement())
    name        String       @unique
    description String
    dayNo       Int
    timetableNo Int
    subjectId   Int
    classroomId Int
    attendances Attendance[]
    subject     Subject      @relation(fields: [subjectId], references: [id])
    classroom   Classroom    @relation(fields: [classroomId], references: [id])
}

model Subject {
    id          Int          @id @default(autoincrement())
    name        String       @unique
    isMajor     Boolean      @default(true) // ?
    isPractice  Boolean      @default(false) // ?
    isCounts    Boolean      @default(false) // ?
    classId     Int
    teacherId   Int
    class       Class        @relation(fields: [classId], references: [id])
    teacher     Teacher      @relation(fields: [teacherId], references: [id])
    lessons     Lesson[]
    evaluations Evaluation[]
}

model Teacher {
    id                  Int          @id @default(autoincrement())
    firstName           String
    lastName            String
    birthDate           DateTime     @db.Date()
    gender              Gender
    classes             Class[]
    subjects            Subject[]
    recordedEvaluations Evaluation[]
}

model Evaluation {
    id               Int            @id @default(autoincrement())
    isActive         Boolean        @default(true) // ?
    description      String
    scoreValue       String
    feedback         String
    studentId        Int
    subjectId        Int
    recordTeacherId  Int
    evaluationTypeId Int
    student          Student        @relation(fields: [studentId], references: [id])
    subject          Subject        @relation(fields: [subjectId], references: [id])
    teacher          Teacher        @relation(fields: [recordTeacherId], references: [id])
    evaluationType   EvaluationType @relation(fields: [evaluationTypeId], references: [id])
}

model Caretaker {
    id        Int     @id @default(autoincrement())
    firstName String
    lastName  String
    email     String
    phone     String
    studentId Int
    student   Student @relation(fields: [studentId], references: [id])
}

// ? problematic 1 attendances ??? -> many lesson for only one subject
model Attendance {
    id        Int      @id @default(autoincrement())
    attended  Boolean  @default(true)
    lessonAt  DateTime @db.Date()
    lessonId  Int
    studentId Int
    lesson    Lesson   @relation(fields: [lessonId], references: [id])
    student   Student  @relation(fields: [studentId], references: [id])
}

// Adatszótárok (indexing tables)
// értékeléstípusok lekezelése pl szöveges értékelés, számértékelés, százalékos értékelés, osztályzat, stb
// szöveges értékelések eltárolása (mintaszövegek)
model EvaluationType {
    id          Int          @id @default(autoincrement())
    name        String       @unique // ??
    isProtected Boolean      @default(false)
    isVisible   Boolean      @default(true)
    evaluations Evaluation[]
}

// OTP Bank, K&H Bank, Erste Bank, Raiffeisen Bank, CIB Bank, UniCredit Bank ... stb
model BankAccountType {
    id              Int               @id @default(autoincrement())
    name            String
    StudentIdentity StudentIdentity[]
}

// probably enum for better localization
model ClassroomType {
    id         Int         @id @default(autoincrement())
    name       String // classroom, laboratory, workshop, gym, library, office, other
    classrooms Classroom[]
}

// CommunityService ??
model CommunityServiceFacility {
    id                Int                @id @default(autoincrement())
    name              String             @unique
    communityServices CommunityService[]
}

enum Gender {
    MALE
    FEMALE
    OTHER
    PREFER_NOT_TO_SAY
}

enum Role {
    STUDENT
    TEACHER
    CARETAKER
    ADMIN
}
